# Since we are wrapping the library inside a component,
# the component has to be registered first:
idf_component_register()

# To build a third-party library, ExternalProject CMake module can be used.
# ExternalProject offers many features which are impossible to demonstrate
# in a single example. Please refer to its documentation for more info:
#   https://cmake.org/cmake/help/latest/module/ExternalProject.html
include(ExternalProject)

# Define downloading URL by platform checking
if (WIN32)
	set(GLM_URL https://github.com/g-truc/glm/archive/refs/tags/1.0.1.zip)
else()
	set(GLM_URL https://github.com/g-truc/glm/archive/refs/tags/1.0.1.tar.gz)
endif()

# Define the location where glm will be installed:
set(GLM_INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/glm)

# This function downloads the project, calls CMake to configure it,
# builds the project and installs it to the specified location:
externalproject_add(glm_proj
	URL ${GLM_URL}
	CMAKE_ARGS
		-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
		-DGLM_BUILD_TESTS=OFF
		-DBUILD_SHARED_LIBS=OFF
		-DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>

# These options are set so that Ninja immediately outputs
# the subproject build to the terminal. Otherwise it looks like the
# build process "hangs" while the subproject is being built.
	USES_TERMINAL_DOWNLOAD TRUE
    USES_TERMINAL_CONFIGURE TRUE
    USES_TERMINAL_BUILD TRUE

# Specify the installation directory for the subproject
    INSTALL_DIR ${GLM_INSTALL_DIR}
# Let CMake know that the library is generated by the subproject build step.
    BUILD_BYPRODUCTS "${GLM_INSTALL_DIR}/lib/libglm.a"
)

# Now that the subproject build is set up, we need to consume the results
# of the build: the header file and the static library.
# To do this, define an imported CMake library:
add_prebuilt_library(glm_lib "${GLM_INSTALL_DIR}/lib/libglm.a"
	PRIV_REQUIRES cxx
)
target_include_directories(glm_lib INTERFACE "${GLM_INSTALL_DIR}/include")
add_dependencies(glm_lib glm_proj)

# Link the imported library to the current component.
target_link_libraries(${COMPONENT_LIB} INTERFACE glm_lib)
